{
  "openapi": "3.1.0",
  "info": {
    "title": "hoprd-api",
    "description": "API enabling developers to interact with a hoprd node programatically through HTTP REST API.",
    "contact": {
      "name": "HOPR Association",
      "email": "tech@hoprnet.org"
    },
    "license": {
      "name": "GPL-3.0-only",
      "identifier": "GPL-3.0-only"
    },
    "version": "4.2.2"
  },
  "paths": {
    "/api/v4/account/addresses": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get node's native addresses.",
        "operationId": "addresses",
        "responses": {
          "200": {
            "description": "The node's public addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAddressesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/account/balances": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get node's and associated Safe's HOPR and native balances as the allowance for HOPR\ntokens to be drawn by HoprChannels from Safe.",
        "description": "HOPR tokens from the Safe balance are used to fund the payment channels between this\nnode and other nodes on the network.\nNATIVE balance of the Node is used to pay for the gas fees for the blockchain.",
        "operationId": "balances",
        "responses": {
          "200": {
            "description": "The node's HOPR and Safe balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalancesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/account/withdraw": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Withdraw funds from this node to the ethereum wallet address.",
        "description": "Withdraw funds from this node to the ethereum wallet address",
        "operationId": "withdraw",
        "requestBody": {
          "description": "Request body for the withdraw endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawBodyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The node's funds have been withdrawn",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Lists channels opened to/from this node. Alternatively, it can print all\nthe channels in the network as this node sees them.",
        "description": "List channels opened to/from this node. Alternatively, it can print all the channels in the network as this node sees them.",
        "operationId": "list_channels",
        "parameters": [
          {
            "name": "includingClosed",
            "in": "query",
            "description": "Should be the closed channels included?",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fullTopology",
            "in": "query",
            "description": "Should all channels (not only the ones concerning this node) be enumerated?",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channels fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeChannelsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Opens a channel to the given on-chain address with the given initial stake of HOPR tokens.",
        "description": "Opens a channel to the given on-chain address with the given initial stake of HOPR tokens.",
        "operationId": "open_channel",
        "requestBody": {
          "description": "Open channel request specification: on-chain address of the counterparty and the initial HOPR token stake.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenChannelBodyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Channel successfully opened.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid counterparty address or stake amount.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Failed to open the channel because of insufficient HOPR balance or allowance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Failed to open the channel because the channel between these nodes already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/corrupted": {
      "get": {
        "tags": [
          "Channels"
        ],
        "description": "List corrupted channels due to incorrect indexing.",
        "operationId": "corrupted_channels",
        "responses": {
          "200": {
            "description": "Corrupted channels retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorruptedChannelsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/{channelId}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Returns information about the given channel.",
        "description": "Returns information about the given channel.",
        "operationId": "show_channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Channel not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Closes the given channel.",
        "description": "Closes the given channel.",
        "operationId": "close_channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel closed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloseChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Channel not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/{channelId}/fund": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Funds the given channel with the given amount of HOPR tokens.",
        "description": "Funds the given channel with the given amount of HOPR tokens.",
        "operationId": "fund_channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "requestBody": {
          "description": "Specifies the amount of HOPR tokens to fund a channel with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundBodyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Channel funded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Failed to fund the channel because of insufficient HOPR balance or allowance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Channel not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/{channelId}/tickets": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Lists all tickets for the given channel  ID.",
        "description": "Lists all tickets for the given channel ID.",
        "operationId": "show_channel_tickets",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched all tickets for the given channel ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelTicket"
                  }
                },
                "example": [
                  {
                    "amount": "10 wxHOPR",
                    "channelEpoch": 1,
                    "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
                    "index": 0,
                    "indexOffset": 1,
                    "signature": "0xe445fcf4e90d25fe3c9199ccfaff85e23ecce8773304d85e7120f1f38787f2329822470487a37f1b5408c8c0b73e874ee9f7594a632713b6096e616857999891",
                    "winProb": "1"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Channel not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/{channelId}/tickets/aggregate": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Starts aggregation of tickets in the given channel.",
        "description": "Starts aggregation of tickets in the given channel.",
        "operationId": "aggregate_tickets_in_channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "responses": {
          "204": {
            "description": "Tickets successfully aggregated"
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Tickets were not found for that channel. That means that no messages were sent inside this channel yet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/channels/{channelId}/tickets/redeem": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Starts redeeming all tickets in the given channel.",
        "description": "Starts redeeming all tickets in the given channel.",
        "operationId": "redeem_tickets_in_channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          }
        ],
        "responses": {
          "204": {
            "description": "Tickets redeemed successfully."
          },
          "400": {
            "description": "Invalid channel id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Tickets were not found for that channel. That means that no messages were sent inside this channel yet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/network/price": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Gets the current ticket price.",
        "description": "Get the current ticket price",
        "operationId": "price",
        "responses": {
          "200": {
            "description": "Current ticket price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketPriceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/network/probability": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Gets the current minimum incoming ticket winning probability defined by the network.",
        "description": "Get the current minimum incoming ticket winning probability defined by the network",
        "operationId": "probability",
        "responses": {
          "200": {
            "description": "Minimum incoming ticket winning probability defined by the network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketProbabilityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/configuration": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the configuration of the running node.",
        "description": "Get the configuration of the running node",
        "operationId": "configuration",
        "responses": {
          "200": {
            "description": "Fetched node configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "propertyNames": {
                    "type": "string"
                  }
                },
                "example": {
                  "...": "...",
                  "hoprChannels": "0x9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
                  "hoprToken": "0x9a676e781a523b5d0c0e43731313a708cb607508",
                  "network": "anvil-localhost",
                  "provider": "http://127.0.0.1:8545"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/entry-nodes": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "List all known entry nodes with multiaddrs and eligibility.",
        "description": "List all known entry nodes with multiaddrs and eligibility",
        "operationId": "entry_nodes",
        "responses": {
          "200": {
            "description": "Fetched public nodes' information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/EntryNode"
                  },
                  "propertyNames": {
                    "type": "string"
                  }
                },
                "example": {
                  "0x188c4462b75e46f0c7262d7f48d182447b93a93c": {
                    "isEligible": true,
                    "multiaddrs": [
                      "/ip4/10.0.2.100/tcp/19091"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/graph": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Retrieve node's channel graph in DOT or JSON format.",
        "description": "Retrieve node's channel graph in DOT or JSON format",
        "operationId": "channel_graph",
        "parameters": [
          {
            "name": "ignoreDisconnectedComponents",
            "in": "query",
            "description": "If set, nodes that are not connected to this node (via open channels) will not be exported.\nThis setting automatically implies `ignore_non_opened_channels`.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ignoreNonOpenedChannels",
            "in": "query",
            "description": "Do not export channels that are not in the `Open` state.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "only3HopPaths",
            "in": "query",
            "description": "Show only nodes that are accessible via 3-hops (via open channels) from this node.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rawGraph",
            "in": "query",
            "description": "Export the entire graph in raw JSON format, that can be later\nused to load the graph into e.g., a unit test.\n\nNote that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched channel graph",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeGraphResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/info": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get information about this HOPR Node.",
        "description": "Get information about this HOPR Node",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "Fetched node version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/peers": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Lists information for `connected peers` and `announced peers`.",
        "description": "Lists information for connected and announced peers",
        "operationId": "peers",
        "parameters": [
          {
            "name": "quality",
            "in": "query",
            "description": "Minimum peer quality to be included in the response.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned observed peers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePeersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed to extract a valid quality parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/node/version": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get the release version of the running node.",
        "description": "Get the release version of the running node",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "Fetched node version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeVersionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/peers/{destination}": {
      "get": {
        "tags": [
          "Peers"
        ],
        "summary": "Returns transport-related information about the given peer.",
        "description": "This includes the peer ids that the given peer has `announced` on-chain\nand peer ids that are actually `observed` by the transport layer.",
        "operationId": "show_peer_info",
        "parameters": [
          {
            "name": "destination",
            "in": "path",
            "description": "Address of the requested peer",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          }
        ],
        "responses": {
          "200": {
            "description": "Peer information fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePeerInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid destination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/peers/{destination}/ping": {
      "post": {
        "tags": [
          "Peers"
        ],
        "summary": "Directly pings the given peer.",
        "description": "Directly ping the given peer",
        "operationId": "ping_peer",
        "parameters": [
          {
            "name": "destination",
            "in": "path",
            "description": "Address of the requested peer",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          }
        ],
        "responses": {
          "200": {
            "description": "Ping successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid peer id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Peer id not found in the network.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "408": {
            "description": "Peer timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/session/config/{id}": {
      "get": {
        "tags": [
          "Session"
        ],
        "description": "Gets configuration of an existing active session.",
        "operationId": "session_config",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x5112D584a1C72Fc25017:487"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved session configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionConfig"
                }
              }
            }
          },
          "400": {
            "description": "Invalid session ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Given session ID does not refer to an existing Session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Session"
        ],
        "description": "Updates configuration of an existing active session.",
        "operationId": "adjust_session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x5112D584a1C72Fc25017:487"
          }
        ],
        "requestBody": {
          "description": "Allows updating of several parameters of an existing active session.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated the configuration"
          },
          "400": {
            "description": "Invalid configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Given session ID does not refer to an existing Session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "406": {
            "description": "Session cannot be reconfigured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/session/{protocol}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Lists existing Session listeners for the given IP protocol.",
        "description": "Lists existing Session listeners for the given IP protocol.",
        "operationId": "list_clients",
        "parameters": [
          {
            "name": "protocol",
            "in": "path",
            "description": "IP transport protocol",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "tcp"
          }
        ],
        "responses": {
          "200": {
            "description": "Opened session listeners for the given IP protocol.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionClientResponse"
                  }
                },
                "example": [
                  {
                    "activeClients": [],
                    "destination": "0x5112D584a1C72Fc250176B57aEba5fFbbB287D8F",
                    "forwardPath": {
                      "Hops": 1
                    },
                    "hoprMtu": 1020,
                    "ip": "127.0.0.1",
                    "maxClientSessions": 2,
                    "maxSurbUpstream": "2000 kb/s",
                    "port": 5542,
                    "protocol": "tcp",
                    "responseBuffer": "2 MB",
                    "returnPath": {
                      "Hops": 1
                    },
                    "sessionPool": 0,
                    "surbLen": 400,
                    "target": "example.com:80"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid IP protocol.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Creates a new client session returning the given session listening host and port over TCP or UDP.\nIf no listening port is given in the request, the socket will be bound to a random free\nport and returned in the response.\nDifferent capabilities can be configured for the session, such as data segmentation or\nretransmission.",
        "description": "Creates a new client HOPR session that will start listening on a dedicated port. Once the port is bound, it is possible to use the socket for bidirectional read and write communication.",
        "operationId": "create_client",
        "parameters": [
          {
            "name": "protocol",
            "in": "path",
            "description": "IP transport protocol",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "tcp"
          }
        ],
        "requestBody": {
          "description": "Creates a new client HOPR session that will start listening on a dedicated port. Once the port is bound, it is possible to use the socket for bidirectional read and write communication.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a new client session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IP protocol.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Listening address and port already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/session/{protocol}/{ip}/{port}": {
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Closes an existing Session listener.\nThe listener must've been previously created and bound for the given IP protocol.\nOnce a listener is closed, no more socket connections can be made to it.\nIf the passed port number is 0, listeners on all ports of the given listening IP and protocol\nwill be closed.",
        "description": "Closes an existing Session listener.",
        "operationId": "close_client",
        "parameters": [
          {
            "name": "protocol",
            "in": "path",
            "description": "IP transport protocol",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IpProtocol"
            }
          },
          {
            "name": "ip",
            "in": "path",
            "description": "Listening IP address of the Session.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "path",
            "description": "Session port used for the listener.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Listener closed successfully"
          },
          "400": {
            "description": "Invalid IP protocol or port.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Listener not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Endpoint is deprecated and will be removed in the future. Returns an empty array.",
        "description": "(deprecated) Returns an empty array.",
        "operationId": "show_all_tickets",
        "responses": {
          "200": {
            "description": "Fetched all tickets in all the channels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelTicket"
                  }
                },
                "example": [
                  {
                    "amount": "10 wxHOPR",
                    "channelEpoch": 1,
                    "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
                    "index": 0,
                    "indexOffset": 1,
                    "signature": "0xe445fcf4e90d25fe3c9199ccfaff85e23ecce8773304d85e7120f1f38787f2329822470487a37f1b5408c8c0b73e874ee9f7594a632713b6096e616857999891",
                    "winProb": "1"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/tickets/redeem": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Starts redeeming of all tickets in all channels.",
        "description": "Starts redeeming of all tickets in all channels.",
        "operationId": "redeem_all_tickets",
        "responses": {
          "204": {
            "description": "Tickets redeemed successfully."
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "The node is not ready."
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/api/v4/tickets/statistics": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns current complete statistics on tickets.",
        "description": "Returns current complete statistics on tickets.",
        "operationId": "show_ticket_statistics",
        "responses": {
          "200": {
            "description": "Tickets statistics fetched successfully. Check schema for description of every field in the statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeTicketStatisticsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Resets the ticket metrics.",
        "description": "Resets the ticket metrics.",
        "operationId": "reset_ticket_statistics",
        "responses": {
          "204": {
            "description": "Ticket statistics reset successfully."
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/eligiblez": {
      "get": {
        "tags": [
          "Checks"
        ],
        "summary": "Check whether the node is eligible in the network.",
        "description": "Check whether the node is eligible in the network",
        "operationId": "eligiblez",
        "responses": {
          "200": {
            "description": "The node is allowed in the network"
          },
          "412": {
            "description": "The node is not allowed in the network"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/healthyz": {
      "get": {
        "tags": [
          "Checks"
        ],
        "summary": "Check whether the node is healthy.",
        "description": "Check whether the node is healthy",
        "operationId": "healthyz",
        "responses": {
          "200": {
            "description": "The node is healthy"
          },
          "412": {
            "description": "The node is not healthy"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Retrieve Prometheus metrics from the running node.",
        "description": "Retrieve Prometheus metrics from the running node",
        "operationId": "metrics",
        "responses": {
          "200": {
            "description": "Fetched node metrics",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authorization token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unknown failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "bearer_token": []
          }
        ]
      }
    },
    "/readyz": {
      "get": {
        "tags": [
          "Checks"
        ],
        "summary": "Check whether the node is ready to accept connections.",
        "description": "Check whether the node is ready to accept connections",
        "operationId": "readyz",
        "responses": {
          "200": {
            "description": "The node is ready to accept connections"
          },
          "412": {
            "description": "The node is not ready to accept connections"
          }
        }
      }
    },
    "/startedz": {
      "get": {
        "tags": [
          "Checks"
        ],
        "summary": "Check whether the node is started.",
        "description": "Check whether the node is started",
        "operationId": "startedz",
        "responses": {
          "200": {
            "description": "The node is started and running"
          },
          "412": {
            "description": "The node is not started and running"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAddressesResponse": {
        "type": "object",
        "description": "Contains the node's native addresses.",
        "required": [
          "native"
        ],
        "properties": {
          "native": {
            "type": "string",
            "example": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          }
        },
        "example": {
          "native": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
        }
      },
      "AccountBalancesResponse": {
        "type": "object",
        "description": "Contains all node's and safe's related balances.",
        "required": [
          "safeNative",
          "native",
          "safeHopr",
          "hopr",
          "safeHoprAllowance"
        ],
        "properties": {
          "hopr": {
            "type": "string",
            "example": "2000 wxHOPR"
          },
          "native": {
            "type": "string",
            "example": "0.1 xDai"
          },
          "safeHopr": {
            "type": "string",
            "example": "2000 wxHOPR"
          },
          "safeHoprAllowance": {
            "type": "string",
            "example": "10000 wxHOPR"
          },
          "safeNative": {
            "type": "string",
            "example": "0.1 xDai"
          }
        },
        "example": {
          "hopr": "1000 wxHOPR",
          "native": "0.1 xDai",
          "safeHopr": "1000 wxHOPR",
          "safeHoprAllowance": "10000 wxHOPR",
          "safeNative": "0.1 xDai"
        }
      },
      "AnnouncedPeer": {
        "type": "object",
        "description": "Represents a peer that has been announced on-chain.",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string",
            "example": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
          },
          "multiaddr": {
            "type": [
              "string",
              "null"
            ],
            "example": "/ip4/178.12.1.9/tcp/19092"
          }
        },
        "example": {
          "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
          "multiaddr": "/ip4/178.12.1.9/tcp/19092"
        }
      },
      "ApiError": {
        "type": "object",
        "description": "Standardized error response for the API",
        "required": [
          "status"
        ],
        "properties": {
          "error": {
            "type": [
              "string",
              "null"
            ],
            "example": "Invalid value passed in parameter 'XYZ'"
          },
          "status": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        },
        "example": {
          "error": "Invalid value passed in parameter 'XYZ'",
          "status": "INVALID_INPUT"
        }
      },
      "ChannelInfoResponse": {
        "type": "object",
        "description": "General information about a channel state.",
        "required": [
          "channelId",
          "source",
          "destination",
          "balance",
          "status",
          "ticketIndex",
          "channelEpoch",
          "closureTime"
        ],
        "properties": {
          "balance": {
            "type": "string",
            "example": "10 wxHOPR"
          },
          "channelEpoch": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0
          },
          "channelId": {
            "type": "string",
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          },
          "closureTime": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "minimum": 0
          },
          "destination": {
            "type": "string",
            "example": "0x188c4462b75e46f0c7262d7f48d182447b93a93c"
          },
          "source": {
            "type": "string",
            "example": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          },
          "status": {
            "type": "string",
            "example": "Open"
          },
          "ticketIndex": {
            "type": "integer",
            "format": "int32",
            "example": 0,
            "minimum": 0
          }
        },
        "example": {
          "balance": "10 wxHOPR",
          "channelEpoch": 1,
          "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
          "closureTime": 0,
          "destination": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
          "source": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6",
          "status": "Open",
          "ticketIndex": 0
        }
      },
      "ChannelTicket": {
        "type": "object",
        "description": "Represents a ticket in a channel.",
        "required": [
          "channelId",
          "amount",
          "index",
          "indexOffset",
          "winProb",
          "channelEpoch",
          "signature"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "example": "1.0 wxHOPR"
          },
          "channelEpoch": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0
          },
          "channelId": {
            "type": "string",
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          },
          "index": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "minimum": 0
          },
          "indexOffset": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0
          },
          "signature": {
            "type": "string",
            "example": "0xe445fcf4e90d25fe3c9199ccfaff85e23ecce8773304d85e7120f1f38787f2329822470487a37f1b5408c8c0b73e874ee9f7594a632713b6096e616857999891"
          },
          "winProb": {
            "type": "string",
            "example": "1"
          }
        },
        "example": {
          "amount": "100",
          "channelEpoch": 1,
          "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
          "index": 0,
          "indexOffset": 1,
          "signature": "0xe445fcf4e90d25fe3c9199ccfaff85e23ecce8773304d85e7120f1f38787f2329822470487a37f1b5408c8c0b73e874ee9f7594a632713b6096e616857999891",
          "winProb": "1"
        }
      },
      "ChannelsQueryRequest": {
        "type": "object",
        "description": "Parameters for enumerating channels.",
        "properties": {
          "fullTopology": {
            "type": "boolean",
            "description": "Should all channels (not only the ones concerning this node) be enumerated?",
            "default": false
          },
          "includingClosed": {
            "type": "boolean",
            "description": "Should be the closed channels included?",
            "default": false
          }
        },
        "example": {
          "fullTopology": false,
          "includingClosed": true
        }
      },
      "CloseChannelResponse": {
        "type": "object",
        "description": "Status of the channel after a close operation.",
        "required": [
          "receipt",
          "channelStatus"
        ],
        "properties": {
          "channelStatus": {
            "type": "string",
            "description": "New status of the channel. Will be one of `Closed` or `PendingToClose`.",
            "example": "PendingToClose"
          },
          "receipt": {
            "type": "string",
            "description": "Receipt for the channel close transaction.",
            "example": "0xd77da7c1821249e663dead1464d185c03223d9663a06bc1d46ed0ad449a07118"
          }
        },
        "example": {
          "channelStatus": "PendingToClose",
          "receipt": "0xd77da7c1821249e663dead1464d185c03223d9663a06bc1d46ed0ad449a07118"
        }
      },
      "CorruptedChannelsResponse": {
        "type": "object",
        "description": "Response body for the list of corrupted channels.",
        "required": [
          "channelIds"
        ],
        "properties": {
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "channelIds": [
            "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          ]
        }
      },
      "EntryNode": {
        "type": "object",
        "description": "Reachable entry node information",
        "required": [
          "multiaddrs",
          "isEligible"
        ],
        "properties": {
          "isEligible": {
            "type": "boolean",
            "example": true
          },
          "multiaddrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "/ip4/10.0.2.100/tcp/19091"
            ]
          }
        },
        "example": {
          "isEligible": true,
          "multiaddrs": [
            "/ip4/10.0.2.100/tcp/19091"
          ]
        }
      },
      "FundBodyRequest": {
        "type": "object",
        "description": "Specifies the amount of HOPR tokens to fund a channel with.",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of HOPR tokens to fund the channel with.",
            "example": "10 wxHOPR"
          }
        },
        "example": {
          "amount": "10 wxHOPR"
        }
      },
      "FundChannelResponse": {
        "type": "object",
        "description": "Response body for funding a channel.",
        "required": [
          "hash"
        ],
        "properties": {
          "hash": {
            "type": "string"
          }
        },
        "example": {
          "hash": "0x188c4462b75e46f0c7262d7f48d182447b93a93c"
        }
      },
      "GraphExportQuery": {
        "type": "object",
        "description": "Query parameters for the channel graph export.",
        "properties": {
          "ignoreDisconnectedComponents": {
            "type": "boolean",
            "description": "If set, nodes that are not connected to this node (via open channels) will not be exported.\nThis setting automatically implies `ignore_non_opened_channels`.",
            "default": false
          },
          "ignoreNonOpenedChannels": {
            "type": "boolean",
            "description": "Do not export channels that are not in the `Open` state.",
            "default": false
          },
          "only3HopPaths": {
            "type": "boolean",
            "description": "Show only nodes that are accessible via 3-hops (via open channels) from this node.",
            "default": false
          },
          "rawGraph": {
            "type": "boolean",
            "description": "Export the entire graph in raw JSON format, that can be later\nused to load the graph into e.g., a unit test.\n\nNote that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.",
            "default": false
          }
        },
        "example": {
          "ignoreDisconnectedComponents": true,
          "ignoreNonOpenedChannels": true,
          "only3HopPaths": true,
          "rawGraph": true
        }
      },
      "HeartbeatInfo": {
        "type": "object",
        "description": "Heartbeat information for a peer.",
        "required": [
          "sent",
          "success"
        ],
        "properties": {
          "sent": {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "minimum": 0
          },
          "success": {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "minimum": 0
          }
        },
        "example": {
          "sent": 10,
          "success": 10
        }
      },
      "IpProtocol": {
        "type": "string",
        "description": "IP transport protocol",
        "enum": [
          "tcp",
          "udp"
        ],
        "example": "tcp"
      },
      "NodeChannel": {
        "type": "object",
        "description": "Channel information as seen by the node.",
        "required": [
          "id",
          "peerAddress",
          "status",
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "string",
            "example": "10 wxHOPR"
          },
          "id": {
            "type": "string",
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          },
          "peerAddress": {
            "type": "string",
            "example": "0x188c4462b75e46f0c7262d7f48d182447b93a93c"
          },
          "status": {
            "type": "string",
            "example": "Open"
          }
        },
        "example": {
          "address": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
          "balance": "10 wxHOPR",
          "id": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
          "status": "Open"
        }
      },
      "NodeChannelsResponse": {
        "type": "object",
        "description": "Listing of channels.",
        "required": [
          "incoming",
          "outgoing",
          "all"
        ],
        "properties": {
          "all": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelInfoResponse"
            },
            "description": "Complete channel topology as seen by this node."
          },
          "incoming": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeChannel"
            },
            "description": "Channels incoming to this node."
          },
          "outgoing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeChannel"
            },
            "description": "Channels outgoing from this node."
          }
        },
        "example": {
          "all": [
            {
              "balance": "10 wxHOPR",
              "channelEpoch": 1,
              "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
              "closureTime": 0,
              "destination": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
              "source": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6",
              "status": "Open",
              "ticketIndex": 0
            }
          ],
          "incoming": [],
          "outgoing": [
            {
              "balance": "10 wxHOPR",
              "id": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
              "peerAddress": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
              "status": "Open"
            }
          ]
        }
      },
      "NodeGraphResponse": {
        "type": "object",
        "description": "Response body for the channel graph export.",
        "required": [
          "graph"
        ],
        "properties": {
          "graph": {
            "type": "string"
          }
        },
        "example": {
          "graph": "\n        ...\n        242 -\u003E 381 [ label = 'Open channel 0x82a72e271cdedd56c29e970ced3517ba93b679869c729112b5a56fa08698df8f; stake=100000000000000000 HOPR; score=None; status=open;' ]\n        ..."
        }
      },
      "NodeInfoResponse": {
        "type": "object",
        "description": "Information about the current node. Covers network, addresses, eligibility, connectivity status, contracts addresses\nand indexer state.",
        "required": [
          "network",
          "announcedAddress",
          "listeningAddress",
          "chain",
          "provider",
          "hoprToken",
          "hoprChannels",
          "hoprNetworkRegistry",
          "hoprNodeSafeRegistry",
          "hoprManagementModule",
          "hoprNodeSafe",
          "isEligible",
          "connectivityStatus",
          "channelClosurePeriod",
          "indexerBlock",
          "indexerLastLogBlock",
          "indexerLastLogChecksum",
          "isIndexerCorrupted"
        ],
        "properties": {
          "announcedAddress": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "/ip4/10.0.2.100/tcp/19092"
            ]
          },
          "chain": {
            "type": "string",
            "example": "anvil-localhost"
          },
          "channelClosurePeriod": {
            "type": "integer",
            "format": "int64",
            "description": "Channel closure period in seconds",
            "example": 15,
            "minimum": 0
          },
          "connectivityStatus": {
            "type": "string",
            "example": "Green"
          },
          "hoprChannels": {
            "type": "string",
            "example": "0x9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae"
          },
          "hoprManagementModule": {
            "type": "string",
            "example": "0xa51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c0"
          },
          "hoprNetworkRegistry": {
            "type": "string",
            "example": "0x3aa5ebb10dc797cac828524e59a333d0a371443c"
          },
          "hoprNodeSafe": {
            "type": "string",
            "example": "0x42bc901b1d040f984ed626eff550718498a6798a"
          },
          "hoprNodeSafeRegistry": {
            "type": "string",
            "example": "0x0dcd1bf9a1b36ce34237eeafef220932846bcd82"
          },
          "hoprToken": {
            "type": "string",
            "example": "0x9a676e781a523b5d0c0e43731313a708cb607508"
          },
          "indexerBlock": {
            "type": "integer",
            "format": "int32",
            "example": 123456,
            "minimum": 0
          },
          "indexerLastLogBlock": {
            "type": "integer",
            "format": "int32",
            "example": 123450,
            "minimum": 0
          },
          "indexerLastLogChecksum": {
            "type": "string",
            "example": "cfde556a7e9ff0848998aa4a9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae"
          },
          "isEligible": {
            "type": "boolean",
            "example": true
          },
          "isIndexerCorrupted": {
            "type": "boolean",
            "example": true
          },
          "listeningAddress": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "/ip4/10.0.2.100/tcp/19092"
            ]
          },
          "network": {
            "type": "string",
            "example": "anvil-localhost"
          },
          "provider": {
            "type": "string",
            "example": "http://127.0.0.1:8545"
          }
        },
        "example": {
          "announcedAddress": [
            "/ip4/10.0.2.100/tcp/19092"
          ],
          "chain": "anvil-localhost",
          "channelClosurePeriod": 15,
          "connectivityStatus": "Green",
          "hoprChannels": "0x9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
          "hoprManagementModule": "0xa51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c0",
          "hoprNetworkRegistry": "0x3aa5ebb10dc797cac828524e59a333d0a371443c",
          "hoprNodeSafe": "0x42bc901b1d040f984ed626eff550718498a6798a",
          "hoprNodeSafeRegistry": "0x0dcd1bf9a1b36ce34237eeafef220932846bcd82",
          "hoprToken": "0x9a676e781a523b5d0c0e43731313a708cb607508",
          "indexBlockPrevChecksum": 0,
          "indexerBlock": 123456,
          "indexerChecksum": "0000000000000000000000000000000000000000000000000000000000000000",
          "indexerLastLogBlock": 123450,
          "indexerLastLogChecksum": "cfde556a7e9ff0848998aa4a9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
          "isEligible": true,
          "isIndexerCorrupted": false,
          "listeningAddress": [
            "/ip4/10.0.2.100/tcp/19092"
          ],
          "network": "anvil-localhost",
          "provider": "http://127.0.0.1:8545"
        }
      },
      "NodePeerInfoResponse": {
        "type": "object",
        "description": "Contains the multiaddresses of peers that are `announced` on-chain and `observed` by the node.",
        "required": [
          "announced",
          "observed"
        ],
        "properties": {
          "announced": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "/ip4/10.0.2.100/tcp/19093"
            ]
          },
          "observed": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "/ip4/10.0.2.100/tcp/19093"
            ]
          }
        },
        "example": {
          "announced": [
            "/ip4/10.0.2.100/tcp/19093"
          ],
          "observed": [
            "/ip4/10.0.2.100/tcp/19093"
          ]
        }
      },
      "NodePeersQueryRequest": {
        "type": "object",
        "description": "Quality information for a peer.",
        "properties": {
          "quality": {
            "type": "number",
            "format": "double",
            "description": "Minimum peer quality to be included in the response.",
            "example": 0.7
          }
        },
        "example": {
          "quality": 0.7
        }
      },
      "NodePeersResponse": {
        "type": "object",
        "description": "All connected and announced peers.",
        "required": [
          "connected",
          "announced"
        ],
        "properties": {
          "announced": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnouncedPeer"
            },
            "example": [
              {
                "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
                "multiaddr": "/ip4/178.12.1.9/tcp/19092"
              }
            ]
          },
          "connected": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeerInfo"
            },
            "example": [
              {
                "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
                "backoff": 0.5,
                "heartbeats": {
                  "sent": 10,
                  "success": 10
                },
                "isNew": true,
                "lastSeen": 1690000000,
                "lastSeenLatency": 100,
                "multiaddr": "/ip4/178.12.1.9/tcp/19092",
                "quality": 0.7,
                "reportedVersion": "2.1.0"
              }
            ]
          }
        },
        "example": {
          "announced": [
            {
              "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
              "multiaddr": "/ip4/178.12.1.9/tcp/19092"
            }
          ],
          "connected": [
            {
              "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
              "backoff": 0.5,
              "heartbeats": {
                "sent": 10,
                "success": 10
              },
              "isNew": true,
              "lastSeen": 1690000000,
              "lastSeenLatency": 100,
              "multiaddr": "/ip4/178.12.1.9/tcp/19092",
              "quality": 0.7,
              "reportedVersion": "2.1.0"
            }
          ]
        }
      },
      "NodeTicketStatisticsResponse": {
        "type": "object",
        "description": "Received tickets statistics.",
        "required": [
          "winningCount",
          "unredeemedValue",
          "redeemedValue",
          "neglectedValue",
          "rejectedValue"
        ],
        "properties": {
          "neglectedValue": {
            "type": "string",
            "example": "0 wxHOPR"
          },
          "redeemedValue": {
            "type": "string",
            "example": "100 wxHOPR"
          },
          "rejectedValue": {
            "type": "string",
            "example": "0 wHOPR"
          },
          "unredeemedValue": {
            "type": "string",
            "example": "20 wxHOPR"
          },
          "winningCount": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "minimum": 0
          }
        },
        "example": {
          "neglectedValue": "0 wxHOPR",
          "redeemedValue": "1000 wxHOPR",
          "rejectedValue": "0 wxHOPR",
          "unredeemedValue": "2000 wxHOPR",
          "winningCount": 0
        }
      },
      "NodeVersionResponse": {
        "type": "object",
        "description": "Running node version.",
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "string",
            "example": "2.1.0"
          }
        },
        "example": {
          "version": "2.1.0"
        }
      },
      "OpenChannelBodyRequest": {
        "type": "object",
        "description": "Request body for opening a channel.",
        "required": [
          "destination",
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Initial amount of stake in HOPR tokens.",
            "example": "10 wxHOPR"
          },
          "destination": {
            "type": "string",
            "description": "On-chain address of the counterparty.",
            "example": "0xa8194d36e322592d4c707b70dbe96121f5c74c64"
          }
        },
        "example": {
          "amount": "10 wxHOPR",
          "destination": "0xa8194d36e322592d4c707b70dbe96121f5c74c64"
        }
      },
      "OpenChannelResponse": {
        "type": "object",
        "description": "Response body for opening a channel.",
        "required": [
          "channelId",
          "transactionReceipt"
        ],
        "properties": {
          "channelId": {
            "type": "string",
            "description": "ID of the new channel.",
            "example": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f"
          },
          "transactionReceipt": {
            "type": "string",
            "description": "Receipt of the channel open transaction.",
            "example": "0x5181ac24759b8e01b3c932e4636c3852f386d17517a8dfc640a5ba6f2258f29c"
          }
        },
        "example": {
          "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
          "transactionReceipt": "0x5181ac24759b8e01b3c932e4636c3852f386d17517a8dfc640a5ba6f2258f29c"
        }
      },
      "PeerInfo": {
        "type": "object",
        "description": "All information about a known peer.",
        "required": [
          "heartbeats",
          "lastSeen",
          "lastSeenLatency",
          "quality",
          "backoff",
          "isNew"
        ],
        "properties": {
          "address": {
            "type": [
              "string",
              "null"
            ],
            "example": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
          },
          "backoff": {
            "type": "number",
            "format": "double",
            "example": 0.5
          },
          "heartbeats": {
            "$ref": "#/components/schemas/HeartbeatInfo"
          },
          "isNew": {
            "type": "boolean",
            "example": true
          },
          "lastSeen": {
            "type": "integer",
            "example": 1690000000,
            "minimum": 0
          },
          "lastSeenLatency": {
            "type": "integer",
            "example": 100,
            "minimum": 0
          },
          "multiaddr": {
            "type": [
              "string",
              "null"
            ],
            "example": "/ip4/178.12.1.9/tcp/19092"
          },
          "quality": {
            "type": "number",
            "format": "double",
            "example": 0.7
          }
        },
        "example": {
          "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
          "backoff": 0.5,
          "heartbeats": {
            "sent": 10,
            "success": 10
          },
          "isNew": true,
          "lastSeen": 1690000000,
          "lastSeenLatency": 100,
          "multiaddr": "/ip4/178.12.1.9/tcp/19092",
          "quality": 0.7,
          "reportedVersion": "2.1.0"
        }
      },
      "PingResponse": {
        "type": "object",
        "description": "Contains the latency and the reported version of a peer that has been pinged.",
        "required": [
          "latency"
        ],
        "properties": {
          "latency": {
            "type": "integer",
            "format": "int64",
            "example": 200,
            "minimum": 0
          }
        },
        "example": {
          "latency": 200
        }
      },
      "RoutingOptions": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "IntermediatePath"
            ],
            "properties": {
              "IntermediatePath": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Hops"
            ],
            "properties": {
              "Hops": {
                "type": "integer",
                "minimum": 0
              }
            }
          }
        ],
        "description": "Routing options for the Session.",
        "example": {
          "Hops": 1
        }
      },
      "SessionCapability": {
        "type": "string",
        "description": "Session capabilities that can be negotiated with the target peer.",
        "enum": [
          "Segmentation",
          "Retransmission",
          "RetransmissionAckOnly",
          "NoDelay",
          "NoRateControl"
        ],
        "example": "Segmentation"
      },
      "SessionClientRequest": {
        "type": "object",
        "description": "Request body for creating a new client session.",
        "required": [
          "destination",
          "forwardPath",
          "returnPath",
          "target"
        ],
        "properties": {
          "capabilities": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/SessionCapability"
            },
            "description": "Capabilities for the Session protocol.\n\nDefaults to `Segmentation` and `Retransmission` for TCP and nothing for UDP."
          },
          "destination": {
            "type": "string",
            "description": "Address of the Exit node."
          },
          "forwardPath": {
            "$ref": "#/components/schemas/RoutingOptions",
            "description": "The forward path for the Session."
          },
          "listenHost": {
            "type": [
              "string",
              "null"
            ],
            "description": "Listen host (`ip:port`) for the Session socket at the Entry node.\n\nSupports also partial specification (only `ip` or only `:port`) with the\nrespective part replaced by the node's configured default."
          },
          "maxClientSessions": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The maximum number of client sessions that the listener can spawn.\n\nThis currently applies only to the TCP sessions, as UDP sessions cannot\nhandle multiple clients (and spawn therefore always only a single session).\n\nIf this value is smaller than the value specified in `session_pool`, it will\nbe set to that value.\n\nThe default value is 5.",
            "minimum": 0
          },
          "maxSurbUpstream": {
            "type": [
              "string",
              "null"
            ],
            "description": "The maximum throughput at which artificial SURBs might be generated and sent\nto the recipient of the Session.\n\nOn Sessions that rarely send data but receive a lot (= Exit node has high SURB consumption),\nthis should roughly match the maximum retrieval throughput.\n\nAll syntaxes like \"2 MBps\", \"1.2Mbps\", \"300 kb/s\", \"1.23 Mb/s\" are supported."
          },
          "responseBuffer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The amount of response data the Session counterparty can deliver back to us,\nwithout us sending any SURBs to them.\n\nIn other words, this size is recalculated to a number of SURBs delivered\nto the counterparty upfront and then maintained.\nThe maintenance is dynamic, based on the number of responses we receive.\n\nAll syntaxes like \"2 MB\", \"128 kiB\", \"3MiB\" are supported. The value must be\nat least the size of 2 Session packet payloads."
          },
          "returnPath": {
            "$ref": "#/components/schemas/RoutingOptions",
            "description": "The return path for the Session."
          },
          "sessionPool": {
            "type": [
              "integer",
              "null"
            ],
            "description": "How many Sessions to pool for clients.\n\nIf no sessions are pooled, they will be opened ad-hoc when a client connects.\nIt has no effect on UDP sessions in the current implementation.\n\nCurrently, the maximum value is 5.",
            "minimum": 0
          },
          "target": {
            "$ref": "#/components/schemas/SessionTargetSpec",
            "description": "Target for the Session."
          }
        },
        "example": {
          "capabilities": [
            "Retransmission",
            "Segmentation"
          ],
          "destination": "0x1B482420Afa04aeC1Ef0e4a00C18451E84466c75",
          "forwardPath": {
            "Hops": 1
          },
          "listenHost": "127.0.0.1:10000",
          "maxClientSessions": 2,
          "maxSurbUpstream": "2000 kb/s",
          "responseBuffer": "2 MB",
          "returnPath": {
            "Hops": 1
          },
          "sessionPool": 0,
          "target": {
            "Plain": "localhost:8080"
          }
        }
      },
      "SessionClientResponse": {
        "type": "object",
        "description": "Response body for creating a new client session.",
        "required": [
          "target",
          "destination",
          "forwardPath",
          "returnPath",
          "protocol",
          "ip",
          "port",
          "hoprMtu",
          "surbLen",
          "activeClients",
          "maxClientSessions"
        ],
        "properties": {
          "activeClients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Lists Session IDs of all active clients.\n\nCan contain multiple entries on TCP sessions, but currently\nalways only a single entry on UDP sessions."
          },
          "destination": {
            "type": "string",
            "description": "Destination node (exit node) of the Session."
          },
          "forwardPath": {
            "$ref": "#/components/schemas/RoutingOptions",
            "description": "Forward routing path."
          },
          "hoprMtu": {
            "type": "integer",
            "description": "MTU used by the underlying HOPR transport.",
            "minimum": 0
          },
          "ip": {
            "type": "string",
            "description": "Listening IP address of the Session's socket.",
            "example": "127.0.0.1"
          },
          "maxClientSessions": {
            "type": "integer",
            "description": "The maximum number of client sessions that the listener can spawn.\n\nThis currently applies only to the TCP sessions, as UDP sessions cannot\nhave multiple clients (defaults to 1 for UDP).",
            "minimum": 0
          },
          "maxSurbUpstream": {
            "type": [
              "string",
              "null"
            ],
            "description": "The maximum throughput at which artificial SURBs might be generated and sent\nto the recipient of the Session."
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "Listening port of the Session's socket.",
            "example": 5542,
            "minimum": 0
          },
          "protocol": {
            "$ref": "#/components/schemas/IpProtocol",
            "description": "IP protocol used by Session's listening socket."
          },
          "responseBuffer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The amount of response data the Session counterparty can deliver back to us, without us\nsending any SURBs to them."
          },
          "returnPath": {
            "$ref": "#/components/schemas/RoutingOptions",
            "description": "Return routing path."
          },
          "sessionPool": {
            "type": [
              "integer",
              "null"
            ],
            "description": "How many Sessions to pool for clients.",
            "minimum": 0
          },
          "surbLen": {
            "type": "integer",
            "description": "Size of a Single Use Reply Block used by the protocol.\n\nThis is useful for SURB balancing calculations.",
            "minimum": 0
          },
          "target": {
            "type": "string",
            "description": "Target of the Session.",
            "example": "example.com:80"
          }
        },
        "example": {
          "activeClients": [],
          "destination": "0x5112D584a1C72Fc250176B57aEba5fFbbB287D8F",
          "forwardPath": {
            "Hops": 1
          },
          "hoprMtu": 1002,
          "ip": "127.0.0.1",
          "maxClientSessions": 2,
          "maxSurbUpstream": "2000 kb/s",
          "port": 5542,
          "protocol": "tcp",
          "responseBuffer": "2 MB",
          "returnPath": {
            "Hops": 1
          },
          "sessionPool": 0,
          "surbLen": 398,
          "target": "example.com:80"
        }
      },
      "SessionConfig": {
        "type": "object",
        "properties": {
          "maxSurbUpstream": {
            "type": "string",
            "description": "The maximum throughput at which artificial SURBs might be generated and sent\nto the recipient of the Session.\n\nOn Sessions that rarely send data but receive a lot (= Exit node has high SURB consumption),\nthis should roughly match the maximum retrieval throughput.\n\nAll syntaxes like \"2 MBps\", \"1.2Mbps\", \"300 kb/s\", \"1.23 Mb/s\" are supported."
          },
          "responseBuffer": {
            "type": "string",
            "description": "The amount of response data the Session counterparty can deliver back to us,\nwithout us sending any SURBs to them.\n\nIn other words, this size is recalculated to a number of SURBs delivered\nto the counterparty upfront and then maintained.\nThe maintenance is dynamic, based on the number of responses we receive.\n\nAll syntaxes like \"2 MB\", \"128 kiB\", \"3MiB\" are supported. The value must be\nat least the size of 2 Session packet payloads."
          }
        },
        "example": {
          "maxSurbUpstream": "2 Mbps",
          "responseBuffer": "2 MB"
        }
      },
      "SessionTargetSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Plain"
            ],
            "properties": {
              "Plain": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Sealed"
            ],
            "properties": {
              "Sealed": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Service"
            ],
            "properties": {
              "Service": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        ],
        "description": "Session target specification.",
        "example": {
          "Service": 0
        }
      },
      "TicketPriceResponse": {
        "type": "object",
        "description": "Contains the ticket price in HOPR tokens.",
        "required": [
          "price"
        ],
        "properties": {
          "price": {
            "type": "string",
            "description": "Price of the ticket in HOPR tokens.",
            "example": "0.03 wxHOPR"
          }
        },
        "example": {
          "price": "0.03 wxHOPR"
        }
      },
      "TicketProbabilityResponse": {
        "type": "object",
        "description": "Contains the winning probability of a ticket.",
        "required": [
          "probability"
        ],
        "properties": {
          "probability": {
            "type": "number",
            "format": "double",
            "description": "Winning probability of a ticket.",
            "example": 0.5
          }
        },
        "example": {
          "probability": 0.5
        }
      },
      "WithdrawBodyRequest": {
        "type": "object",
        "description": "Request body for the withdrawal endpoint.",
        "required": [
          "amount",
          "address"
        ],
        "properties": {
          "address": {
            "type": "string",
            "example": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
          },
          "amount": {
            "type": "string",
            "example": "20000 wxHOPR"
          }
        },
        "example": {
          "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
          "amount": "20000 wxHOPR"
        }
      },
      "WithdrawResponse": {
        "type": "object",
        "description": "Response body for the withdrawal endpoint.",
        "required": [
          "receipt"
        ],
        "properties": {
          "receipt": {
            "type": "string",
            "example": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
          }
        },
        "example": {
          "receipt": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
        }
      }
    },
    "securitySchemes": {
      "api_token": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Auth-Token",
        "description": "API Token"
      },
      "bearer_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "token",
        "description": "Bearer token authentication"
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "HOPR node account endpoints"
    },
    {
      "name": "Channels",
      "description": "HOPR node chain channels manipulation endpoints"
    },
    {
      "name": "Configuration",
      "description": "HOPR node configuration endpoints"
    },
    {
      "name": "Checks",
      "description": "HOPR node functionality checks"
    },
    {
      "name": "Network",
      "description": "HOPR node network endpoints"
    },
    {
      "name": "Node",
      "description": "HOPR node information endpoints"
    },
    {
      "name": "Peers",
      "description": "HOPR node peer manipulation endpoints"
    },
    {
      "name": "Session",
      "description": "HOPR node session management endpoints"
    },
    {
      "name": "Tickets",
      "description": "HOPR node ticket management endpoints"
    },
    {
      "name": "Metrics",
      "description": "HOPR node metrics endpoints"
    }
  ]
}