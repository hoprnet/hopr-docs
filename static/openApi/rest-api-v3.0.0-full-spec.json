{
    "openapi": "3.0.3",
    "info": {
      "title": "hoprd-api",
      "description": "API enabling developers to interact with a hoprd node programatically through HTTP REST API.",
      "contact": {
        "name": "HOPR Association",
        "email": "tech@hoprnet.org"
      },
      "license": {
        "name": "GPL-3.0-only"
      },
      "version": "3.12.0"
    },
    "paths": {
      "/api/v3/account/addresses": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get node's HOPR and native addresses.",
          "description": "HOPR address is represented by the P2P PeerId and can be used by other node owner to interact with this node.",
          "operationId": "addresses",
          "responses": {
            "200": {
              "description": "The node's public addresses",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountAddressesResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/account/balances": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get node's and associated Safe's HOPR and native balances as the allowance for HOPR",
          "description": "tokens to be drawn by HoprChannels from Safe.\n\nHOPR tokens from the Safe balance are used to fund the payment channels between this\nnode and other nodes on the network.\nNATIVE balance of the Node is used to pay for the gas fees for the blockchain.",
          "operationId": "balances",
          "responses": {
            "200": {
              "description": "The node's HOPR and Safe balances",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountBalancesResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/account/withdraw": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Withdraw funds from this node to the ethereum wallet address.",
          "description": "Both Native or HOPR can be withdrawn using this method.",
          "operationId": "withdraw",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The node's funds have been withdrawn",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WithdrawResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/aliases": {
        "get": {
          "tags": [
            "Alias"
          ],
          "summary": "(deprecated, will be removed in v3.0) Get each previously set alias and its corresponding PeerId as a hashmap.",
          "operationId": "aliases",
          "responses": {
            "200": {
              "description": "Each alias with its corresponding PeerId",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "alice": "12D3KooWPWD5P5ZzMRDckgfVaicY5JNoo7JywGotoAv17d7iKx1z",
                    "me": "12D3KooWJmLm8FnBfvYQ5BAZ5qcYBxQFFBzAAEYUBUNJNE8cRsYS"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "No aliases found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "post": {
          "tags": [
            "Alias"
          ],
          "summary": "(deprecated, will be removed in v3.0) Set alias for a peer with a specific PeerId.",
          "operationId": "set_alias",
          "requestBody": {
            "description": "Alias name along with the PeerId to be aliased",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDestinationBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Alias set successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PeerIdResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid PeerId: The format or length of the peerId is incorrect.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "409": {
              "description": "Either alias exists or the peer_id is already aliased.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Alias"
          ],
          "summary": "(deprecated, will be removed in v3.0) Clear all aliases.",
          "operationId": "clear_aliases",
          "responses": {
            "204": {
              "description": "All aliases removed successfully"
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/aliases/{alias}": {
        "get": {
          "tags": [
            "Alias"
          ],
          "summary": "(deprecated, will be removed in v3.0) Get alias for the PeerId (Hopr address) that have this alias assigned to it.",
          "operationId": "get_alias",
          "parameters": [
            {
              "name": "alias",
              "in": "path",
              "description": "Alias to be shown",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Get PeerId for an alias",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PeerIdResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "PeerId not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Alias"
          ],
          "summary": "(deprecated, will be removed in v3.0) Delete an alias.",
          "operationId": "delete_alias",
          "parameters": [
            {
              "name": "alias",
              "in": "path",
              "description": "Alias to be shown",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Alias removed successfully"
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/aliases_addresses": {
        "get": {
          "tags": [
            "Alias"
          ],
          "operationId": "aliases_addresses",
          "responses": {
            "200": {
              "description": "Each alias with its corresponding Address",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "alice": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
                    "me": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "No aliases found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/aliases_addresses/{alias}": {
        "get": {
          "tags": [
            "Alias"
          ],
          "operationId": "get_alias_address",
          "parameters": [
            {
              "name": "alias",
              "in": "path",
              "description": "Alias to be shown",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Get ETH address for an alias",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddressResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Address not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels": {
        "get": {
          "tags": [
            "Channels"
          ],
          "summary": "Lists channels opened to/from this node. Alternatively, it can print all",
          "description": "the channels in the network as this node sees them.",
          "operationId": "list_channels",
          "parameters": [
            {
              "name": "includingClosed",
              "in": "query",
              "description": "Should be the closed channels included?",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "fullTopology",
              "in": "query",
              "description": "Should all channels (not only the ones concerning this node) be enumerated?",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Channels fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeChannelsResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "post": {
          "tags": [
            "Channels"
          ],
          "summary": "Opens a channel to the given on-chain address with the given initial stake of HOPR tokens.",
          "operationId": "open_channel",
          "requestBody": {
            "description": "Open channel request specification: on-chain address of the counterparty and the initial HOPR token stake.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenChannelBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Channel successfully opened.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OpenChannelResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid counterparty address or stake amount.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "403": {
              "description": "Failed to open the channel because of insufficient HOPR balance or allowance.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "409": {
              "description": "Failed to open the channel because the channel between this nodes already exists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels/{channelId}": {
        "get": {
          "tags": [
            "Channels"
          ],
          "summary": "Returns information about the given channel.",
          "operationId": "show_channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Channel fetched successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChannelInfoResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Channel not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Channels"
          ],
          "summary": "Closes the given channel.",
          "description": "If the channel is currently `Open`, it will transition it to `PendingToClose`.\nIf the channels is in `PendingToClose` and the channel closure period has elapsed,\nit will transition it to `Closed`.",
          "operationId": "close_channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Channel closed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CloseChannelResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Channel not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels/{channelId}/fund": {
        "post": {
          "tags": [
            "Channels"
          ],
          "summary": "Funds the given channel with the given amount of HOPR tokens.",
          "operationId": "fund_channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Specifies the amount of HOPR tokens to fund a channel with.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Channel funded successfully",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "403": {
              "description": "Failed to fund the channel because of insufficient HOPR balance or allowance.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Channel not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels/{channelId}/tickets": {
        "get": {
          "tags": [
            "Channels"
          ],
          "summary": "Lists all tickets for the given channel  ID.",
          "operationId": "show_channel_tickets",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Fetched all tickets for the given channel ID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChannelTicket"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Channel not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels/{channelId}/tickets/aggregate": {
        "post": {
          "tags": [
            "Channels"
          ],
          "summary": "Starts aggregation of tickets in the given channel.",
          "operationId": "aggregate_tickets_in_channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Tickets successfully aggregated"
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Tickets were not found for that channel. That means that no messages were sent inside this channel yet.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/channels/{channelId}/tickets/redeem": {
        "post": {
          "tags": [
            "Channels"
          ],
          "summary": "Starts redeeming all tickets in the given channel.",
          "description": "**WARNING:** this should almost **never** be used as it can issue a large\nnumber of on-chain transactions. The tickets should almost always be aggregated first.",
          "operationId": "redeem_tickets_in_channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "description": "ID of the channel.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Tickets redeemed successfully."
            },
            "400": {
              "description": "Invalid channel id.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Tickets were not found for that channel. That means that no messages were sent inside this channel yet.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages": {
        "post": {
          "tags": [
            "Messages"
          ],
          "summary": "Send a message to another peer using the given path.",
          "description": "The message can be sent either over a specified path or using a specified\nnumber of HOPS, if no path is given.",
          "operationId": "send_message",
          "requestBody": {
            "description": "Body of a message to send",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendMessageBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The message was sent successfully, DOES NOT imply successful delivery.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SendMessageResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Messages"
          ],
          "summary": "Delete messages from nodes message inbox.",
          "operationId": "delete_messages",
          "parameters": [
            {
              "name": "tag",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "nullable": true,
                "minimum": 0
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Messages successfully deleted."
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages/peek": {
        "post": {
          "tags": [
            "Messages"
          ],
          "summary": "Peek the oldest message currently present in the nodes message inbox.",
          "description": "The message is not removed from the inbox.",
          "operationId": "peek",
          "requestBody": {
            "description": "Tag of message queue to peek from",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagQueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Message successfully peeked at.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePopResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "The specified resource was not found."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages/peek-all": {
        "post": {
          "tags": [
            "Messages"
          ],
          "summary": "Peek the list of messages currently present in the nodes message inbox, filtered by tag,",
          "description": "and optionally by timestamp (epoch in milliseconds).\nThe messages are not removed from the inbox.",
          "operationId": "peek_all",
          "requestBody": {
            "description": "Tag of message queue and optionally a timestamp since from to start peeking. When an empty object or an object with a `tag: 0` is provided, it fetches all the messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessageBodyRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "All messages successfully peeked at.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePopAllResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "The specified resource was not found."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages/pop": {
        "post": {
          "tags": [
            "Messages"
          ],
          "summary": "Get the oldest message currently present in the nodes message inbox.",
          "description": "The message is removed from the inbox.",
          "operationId": "pop",
          "requestBody": {
            "description": "Tag of message queue to pop from",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagQueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Message successfully extracted.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePopResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "The specified resource was not found."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages/pop-all": {
        "post": {
          "tags": [
            "Messages"
          ],
          "summary": "Get the list of messages currently present in the nodes message inbox.",
          "description": "The messages are removed from the inbox.",
          "operationId": "pop_all",
          "requestBody": {
            "description": "Tag of message queue to pop from. When an empty object or an object with a `tag: 0` is provided, it lists and removes all the messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagQueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "All message successfully extracted.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePopAllResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "The specified resource was not found."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/messages/size": {
        "get": {
          "tags": [
            "Messages"
          ],
          "summary": "Get size of filtered message inbox for a specific tag",
          "operationId": "size",
          "parameters": [
            {
              "name": "tag",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "nullable": true,
                "minimum": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the message inbox size filtered by the given tag",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SizeResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/network/price": {
        "get": {
          "tags": [
            "Network"
          ],
          "summary": "Obtains the current ticket price.",
          "operationId": "price",
          "responses": {
            "200": {
              "description": "Current ticket price",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TicketPriceResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/network/probability": {
        "get": {
          "tags": [
            "Network"
          ],
          "summary": "Gets the current minimum incoming ticket winning probability defined by the network.",
          "operationId": "probability",
          "responses": {
            "200": {
              "description": "Minimum incoming ticket winning probability defined by the network",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TicketProbabilityResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/configuration": {
        "get": {
          "tags": [
            "Configuration"
          ],
          "summary": "Get the configuration of the running node.",
          "operationId": "configuration",
          "responses": {
            "200": {
              "description": "Fetched node configuration",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/entryNodes": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "List all known entry nodes with multiaddrs and eligibility.",
          "operationId": "entry_nodes",
          "responses": {
            "200": {
              "description": "Fetched public nodes' information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/EntryNode"
                    }
                  },
                  "example": {
                    "0x188c4462b75e46f0c7262d7f48d182447b93a93c": {
                      "isElligible": true,
                      "multiaddrs": [
                        "/ip4/10.0.2.100/tcp/19091"
                      ]
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/graph": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "Retrieve node's channel graph in DOT or JSON format.",
          "operationId": "channel_graph",
          "parameters": [
            {
              "name": "ignoreDisconnectedComponents",
              "in": "query",
              "description": "If set, nodes that are not connected to this node (via open channels) will not be exported.\nThis setting automatically implies `ignore_non_opened_channels`.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "ignoreNonOpenedChannels",
              "in": "query",
              "description": "Do not export channels that are not in the `Open` state.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "only3HopPaths",
              "in": "query",
              "description": "Show only nodes that are accessible via 3-hops (via open channels) from this node.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "rawGraph",
              "in": "query",
              "description": "Export the entire graph in raw JSON format, that can be later\nused to load the graph into e.g., a unit test.\n\nNote that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Fetched channel graph",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/info": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "Get information about this HOPR Node.",
          "operationId": "info",
          "responses": {
            "200": {
              "description": "Fetched node version",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeInfoResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/metrics": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "Retrieve Prometheus metrics from the running node.",
          "operationId": "metrics",
          "responses": {
            "200": {
              "description": "Fetched node metrics",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/peers": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "Lists information for `connected peers` and `announced peers`.",
          "description": "Connected peers are nodes which are connected to the node while announced peers are\nnodes which have announced to the network.\n\nOptionally pass `quality` parameter to get only peers with higher or equal quality\nto the specified value.",
          "operationId": "peers",
          "parameters": [
            {
              "name": "quality",
              "in": "query",
              "required": false,
              "schema": {
                "type": "number",
                "format": "double"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned observed peers",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodePeersResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Failed to extract a valid quality parameter",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/node/version": {
        "get": {
          "tags": [
            "Node"
          ],
          "summary": "Get the release version of the running node.",
          "operationId": "version",
          "responses": {
            "200": {
              "description": "Fetched node version",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeVersionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/peers/{destination}": {
        "get": {
          "tags": [
            "Peers"
          ],
          "summary": "Returns transport-related information about the given peer.",
          "description": "This includes the peer ids that the given peer has `announced` on-chain\nand peer ids that are actually `observed` by the transport layer.",
          "operationId": "show_peer_info",
          "parameters": [
            {
              "name": "destination",
              "in": "path",
              "description": "PeerID or address of the requested peer",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Peer information fetched successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodePeerInfoResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid destination",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/peers/{destination}/ping": {
        "post": {
          "tags": [
            "Peers"
          ],
          "summary": "Directly pings the given peer.",
          "operationId": "ping_peer",
          "parameters": [
            {
              "name": "destination",
              "in": "path",
              "description": "PeerID or address of the requested peer",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ping successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PingResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid peer id",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Peer id not found in the network.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "408": {
              "description": "Peer timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/session/{protocol}": {
        "get": {
          "tags": [
            "Session"
          ],
          "summary": "Lists existing Session listeners for the given IP protocol.",
          "operationId": "list_clients",
          "parameters": [
            {
              "name": "protocol",
              "in": "path",
              "description": "IP transport protocol",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Opened session listeners for the given IP protocol.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SessionClientResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid IP protocol.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "post": {
          "tags": [
            "Session"
          ],
          "summary": "Creates a new client session returning the given session listening host and port over TCP or UDP.",
          "description": "If no listening port is given in the request, the socket will be bound to a random free\nport and returned in the response.\nDifferent capabilities can be configured for the session, such as data segmentation or\nretransmission.\n\nOnce the host and port are bound, it is possible to use the socket for bidirectional read/write\ncommunication over the selected IP protocol and HOPR network routing with the given destination.\nThe destination HOPR node forwards all the data to the given target over the selected IP protocol.\n\nVarious services require different types of socket communications:\n- services running over UDP usually do not require data retransmission, as it is already expected\nthat UDP does not provide these and is therefore handled at the application layer.\n- On the contrary, services running over TCP *almost always* expect data segmentation and\nretransmission capabilities, so these should be configured while creating a session that passes\nTCP data.",
          "operationId": "create_client",
          "parameters": [
            {
              "name": "protocol",
              "in": "path",
              "description": "IP transport protocol",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Creates a new client HOPR session that will start listening on a dedicated port. Once the port is bound, it is possible to use the socket for bidirectional read and write communication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionClientRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successfully created a new client session.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SessionClientResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid IP protocol.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "409": {
              "description": "Listening address and port already in use.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/session/{protocol}/{ip}/{port}": {
        "delete": {
          "tags": [
            "Session"
          ],
          "summary": "Closes an existing Session listener.",
          "description": "The listener must've been previously created and bound for the given IP protocol.\nOnce a listener is closed, no more socket connections can be made to it.\nIf the passed port number is 0, listeners on all ports of the given listening IP and protocol\nwill be closed.",
          "operationId": "close_client",
          "parameters": [
            {
              "name": "protocol",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IpProtocol"
              }
            },
            {
              "name": "ip",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "port",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Listener closed successfully"
            },
            "400": {
              "description": "Invalid IP protocol or port.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "404": {
              "description": "Listener not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/tickets": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Endpoint is deprecated and will be removed in the future. Returns an empty array.",
          "operationId": "show_all_tickets",
          "responses": {
            "200": {
              "description": "Fetched all tickets in all the channels",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChannelTicket"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/tickets/redeem": {
        "post": {
          "tags": [
            "Tickets"
          ],
          "summary": "Starts redeeming of all tickets in all channels.",
          "description": "**WARNING:** this should almost **never** be used as it can issue a large\nnumber of on-chain transactions. The tickets should almost always be aggregated first.",
          "operationId": "redeem_all_tickets",
          "responses": {
            "204": {
              "description": "Tickets redeemed successfully."
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "412": {
              "description": "The node is not ready."
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/api/v3/tickets/statistics": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Returns current complete statistics on tickets.",
          "operationId": "show_ticket_statistics",
          "responses": {
            "200": {
              "description": "Tickets statistics fetched successfully. Check schema for description of every field in the statistics.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeTicketStatisticsResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Tickets"
          ],
          "summary": "Resets the ticket metrics.",
          "operationId": "reset_ticket_statistics",
          "responses": {
            "204": {
              "description": "Ticket statistics reset successfully."
            },
            "401": {
              "description": "Invalid authorization token.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            },
            "422": {
              "description": "Unknown failure",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_token": []
            },
            {
              "bearer_token": []
            }
          ]
        }
      },
      "/eligiblez": {
        "get": {
          "tags": [
            "Checks"
          ],
          "summary": "Check whether the node is eligible in the network.",
          "operationId": "eligiblez",
          "responses": {
            "200": {
              "description": "The node is allowed in the network"
            },
            "412": {
              "description": "The node is not allowed in the network"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/healthyz": {
        "get": {
          "tags": [
            "Checks"
          ],
          "summary": "Check whether the node is healthy.",
          "operationId": "healthyz",
          "responses": {
            "200": {
              "description": "The node is healthy"
            },
            "412": {
              "description": "The node is not healthy"
            }
          }
        }
      },
      "/readyz": {
        "get": {
          "tags": [
            "Checks"
          ],
          "summary": "Check whether the node is ready to accept connections.",
          "operationId": "readyz",
          "responses": {
            "200": {
              "description": "The node is ready to accept connections"
            },
            "412": {
              "description": "The node is not ready to accept connections"
            }
          }
        }
      },
      "/startedz": {
        "get": {
          "tags": [
            "Checks"
          ],
          "summary": "Check whether the node is started.",
          "operationId": "startedz",
          "responses": {
            "200": {
              "description": "The node is started and running"
            },
            "412": {
              "description": "The node is not started and running"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AccountAddressesResponse": {
          "type": "object",
          "required": [
            "native",
            "hopr"
          ],
          "properties": {
            "hopr": {
              "type": "string"
            },
            "native": {
              "type": "string"
            }
          },
          "example": {
            "hopr": "12D3KooWJmLm8FnBfvYQ5BAZ5qcYBxQFFBzAAEYUBUNJNE8cRsYS",
            "native": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          }
        },
        "AccountBalancesResponse": {
          "type": "object",
          "required": [
            "safeNative",
            "native",
            "safeHopr",
            "hopr",
            "safeHoprAllowance"
          ],
          "properties": {
            "hopr": {
              "type": "string"
            },
            "native": {
              "type": "string"
            },
            "safeHopr": {
              "type": "string"
            },
            "safeHoprAllowance": {
              "type": "string"
            },
            "safeNative": {
              "type": "string"
            }
          },
          "example": {
            "hopr": "2000000000000000000000",
            "native": "9999563581204904000",
            "safeHopr": "2000000000000000000000",
            "safeHoprAllowance": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
            "safeNative": "10000000000000000000"
          }
        },
        "AddressResponse": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "example": {
            "address": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6"
          }
        },
        "AliasDestinationBodyRequest": {
          "type": "object",
          "required": [
            "alias"
          ],
          "properties": {
            "alias": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "peerId": {
              "type": "string"
            }
          },
          "example": {
            "alias": "Alice",
            "destination": "12D3KooWRWeTozREYHzWTbuCYskdYhED1MXpDwTrmccwzFrd2mEA"
          }
        },
        "AnnouncedPeer": {
          "type": "object",
          "required": [
            "peerId",
            "peerAddress"
          ],
          "properties": {
            "multiaddr": {
              "type": "string",
              "nullable": true
            },
            "peerAddress": {
              "type": "string"
            },
            "peerId": {
              "type": "string"
            }
          },
          "example": {
            "multiaddr": "/ip4/178.12.1.9/tcp/19092",
            "peerAddress": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
            "peerId": "12D3KooWRWeaTozREYHzWTbuCYskdYhED1MXpDwTrmccwzFrd2mEA"
          }
        },
        "ApiError": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "error": {
              "type": "string",
              "nullable": true
            },
            "status": {
              "type": "string"
            }
          },
          "example": {
            "error": "Invalid value passed in parameter 'XYZ'",
            "status": "INVALID_INPUT"
          }
        },
        "ChannelInfoResponse": {
          "type": "object",
          "required": [
            "channelId",
            "sourceAddress",
            "destinationAddress",
            "sourcePeerId",
            "destinationPeerId",
            "balance",
            "status",
            "ticketIndex",
            "channelEpoch",
            "closureTime"
          ],
          "properties": {
            "balance": {
              "type": "string"
            },
            "channelEpoch": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "channelId": {
              "type": "string"
            },
            "closureTime": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "destinationAddress": {
              "type": "string"
            },
            "destinationPeerId": {
              "type": "string"
            },
            "sourceAddress": {
              "type": "string"
            },
            "sourcePeerId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "ticketIndex": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "example": {
            "balance": "10000000000000000000",
            "channelEpoch": 1,
            "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
            "closureTime": 0,
            "destinationAddress": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
            "destinationPeerId": "12D3KooWPWD5P5ZzMRDckgfVaicY5JNoo7JywGotoAv17d7iKx1z",
            "sourceAddress": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6",
            "sourcePeerId": "12D3KooWJmLm8FnBfvYQ5BAZ5qcYBxQFFBzAAEYUBUNJNE8cRsYS",
            "status": "Open",
            "ticketIndex": 0
          }
        },
        "ChannelTicket": {
          "type": "object",
          "required": [
            "channelId",
            "amount",
            "index",
            "indexOffset",
            "winProb",
            "channelEpoch",
            "signature"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "channelEpoch": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "channelId": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "indexOffset": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "signature": {
              "type": "string"
            },
            "winProb": {
              "type": "string"
            }
          },
          "example": {
            "amount": "100",
            "channelEpoch": 1,
            "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
            "index": 0,
            "indexOffset": 1,
            "signature": "0xe445fcf4e90d25fe3c9199ccfaff85e23ecce8773304d85e7120f1f38787f2329822470487a37f1b5408c8c0b73e874ee9f7594a632713b6096e616857999891",
            "winProb": "1"
          }
        },
        "ChannelsQueryRequest": {
          "type": "object",
          "description": "Parameters for enumerating channels.",
          "properties": {
            "fullTopology": {
              "type": "boolean",
              "description": "Should all channels (not only the ones concerning this node) be enumerated?",
              "default": false
            },
            "includingClosed": {
              "type": "boolean",
              "description": "Should be the closed channels included?",
              "default": false
            }
          }
        },
        "CloseChannelResponse": {
          "type": "object",
          "required": [
            "receipt",
            "channelStatus"
          ],
          "properties": {
            "channelStatus": {
              "type": "string",
              "description": "New status of the channel. Will be one of `Closed` or `PendingToClose`."
            },
            "receipt": {
              "type": "string",
              "description": "Receipt for the channel close transaction."
            }
          },
          "example": {
            "channelStatus": "PendingToClose",
            "receipt": "0xd77da7c1821249e663dead1464d185c03223d9663a06bc1d46ed0ad449a07118"
          }
        },
        "DeleteAliasRequest": {
          "type": "object",
          "required": [
            "alias"
          ],
          "properties": {
            "alias": {
              "type": "string"
            }
          },
          "example": {
            "alias": "Alice"
          }
        },
        "EntryNode": {
          "type": "object",
          "required": [
            "multiaddrs",
            "isEligible"
          ],
          "properties": {
            "isEligible": {
              "type": "boolean"
            },
            "multiaddrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "FundBodyRequest": {
          "type": "object",
          "description": "Specifies the amount of HOPR tokens to fund a channel with.",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "type": "string",
              "description": "Amount of HOPR tokens to fund the channel with."
            }
          },
          "example": {
            "amount": "10000000000000000000"
          }
        },
        "GetAliasRequest": {
          "type": "object",
          "required": [
            "alias"
          ],
          "properties": {
            "alias": {
              "type": "string"
            }
          },
          "example": {
            "alias": "Alice"
          }
        },
        "GetMessageBodyRequest": {
          "type": "object",
          "properties": {
            "tag": {
              "type": "integer",
              "format": "int32",
              "description": "The message tag used to filter messages based on application",
              "nullable": true,
              "minimum": 0
            },
            "timestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Timestamp to filter messages received after this timestamp",
              "minimum": 0
            }
          },
          "example": {
            "tag": 801,
            "timestamp": 2147483647
          }
        },
        "GraphExportQuery": {
          "type": "object",
          "properties": {
            "ignoreDisconnectedComponents": {
              "type": "boolean",
              "description": "If set, nodes that are not connected to this node (via open channels) will not be exported.\nThis setting automatically implies `ignore_non_opened_channels`.",
              "default": false
            },
            "ignoreNonOpenedChannels": {
              "type": "boolean",
              "description": "Do not export channels that are not in the `Open` state.",
              "default": false
            },
            "only3HopPaths": {
              "type": "boolean",
              "description": "Show only nodes that are accessible via 3-hops (via open channels) from this node.",
              "default": false
            },
            "rawGraph": {
              "type": "boolean",
              "description": "Export the entire graph in raw JSON format, that can be later\nused to load the graph into e.g., a unit test.\n\nNote that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.",
              "default": false
            }
          }
        },
        "HeartbeatInfo": {
          "type": "object",
          "required": [
            "sent",
            "success"
          ],
          "properties": {
            "sent": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "success": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          "example": {
            "sent": 10,
            "success": 10
          }
        },
        "IpProtocol": {
          "type": "string",
          "enum": [
            "tcp",
            "udp"
          ]
        },
        "MessagePopAllResponse": {
          "type": "object",
          "required": [
            "messages"
          ],
          "properties": {
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessagePopResponse"
              }
            }
          }
        },
        "MessagePopResponse": {
          "type": "object",
          "required": [
            "tag",
            "body",
            "receivedAt"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "receivedAt": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "tag": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "example": {
            "body": "Test message 1",
            "receivedAt": 1704453953073,
            "tag": 2000
          }
        },
        "NodeChannel": {
          "type": "object",
          "required": [
            "id",
            "peerAddress",
            "status",
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "peerAddress": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          }
        },
        "NodeChannelsResponse": {
          "type": "object",
          "description": "Listing of channels.",
          "required": [
            "incoming",
            "outgoing",
            "all"
          ],
          "properties": {
            "all": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelInfoResponse"
              },
              "description": "Complete channel topology as seen by this node."
            },
            "incoming": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeChannel"
              },
              "description": "Channels incoming to this node."
            },
            "outgoing": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeChannel"
              },
              "description": "Channels outgoing from this node."
            }
          },
          "example": {
            "all": [
              {
                "balance": "10000000000000000000",
                "channelEpoch": 1,
                "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
                "closureTime": 0,
                "destinationAddress": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
                "destinationPeerId": "12D3KooWPWD5P5ZzMRDckgfVaicY5JNoo7JywGotoAv17d7iKx1z",
                "sourceAddress": "0x07eaf07d6624f741e04f4092a755a9027aaab7f6",
                "sourcePeerId": "12D3KooWJmLm8FnBfvYQ5BAZ5qcYBxQFFBzAAEYUBUNJNE8cRsYS",
                "status": "Open",
                "ticketIndex": 0
              }
            ],
            "incoming": [],
            "outgoing": [
              {
                "balance": "10000000000000000010",
                "id": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
                "peerAddress": "0x188c4462b75e46f0c7262d7f48d182447b93a93c",
                "status": "Open"
              }
            ]
          }
        },
        "NodeInfoResponse": {
          "type": "object",
          "required": [
            "network",
            "announcedAddress",
            "listeningAddress",
            "chain",
            "provider",
            "hoprToken",
            "hoprChannels",
            "hoprNetworkRegistry",
            "hoprNodeSafeRegistry",
            "hoprManagementModule",
            "hoprNodeSafe",
            "isEligible",
            "connectivityStatus",
            "channelClosurePeriod",
            "indexerBlock",
            "indexerChecksum",
            "indexBlockPrevChecksum",
            "indexerLastLogBlock",
            "indexerLastLogChecksum"
          ],
          "properties": {
            "announcedAddress": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "chain": {
              "type": "string"
            },
            "channelClosurePeriod": {
              "type": "integer",
              "format": "int64",
              "description": "Channel closure period in seconds",
              "minimum": 0
            },
            "connectivityStatus": {
              "type": "string"
            },
            "hoprChannels": {
              "type": "string"
            },
            "hoprManagementModule": {
              "type": "string"
            },
            "hoprNetworkRegistry": {
              "type": "string"
            },
            "hoprNodeSafe": {
              "type": "string"
            },
            "hoprNodeSafeRegistry": {
              "type": "string"
            },
            "hoprToken": {
              "type": "string"
            },
            "indexBlockPrevChecksum": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "indexerBlock": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "indexerChecksum": {
              "type": "string"
            },
            "indexerLastLogBlock": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "indexerLastLogChecksum": {
              "type": "string"
            },
            "isEligible": {
              "type": "boolean"
            },
            "listeningAddress": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "network": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            }
          },
          "example": {
            "announcedAddress": [
              "/ip4/10.0.2.100/tcp/19092"
            ],
            "chain": "anvil-localhost",
            "channelClosurePeriod": 15,
            "connectivityStatus": "Green",
            "hoprChannels": "0x9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
            "hoprManagementModule": "0xa51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c0",
            "hoprNetworkRegistry": "0x3aa5ebb10dc797cac828524e59a333d0a371443c",
            "hoprNodeSafe": "0x42bc901b1d040f984ed626eff550718498a6798a",
            "hoprNodeSageRegistry": "0x0dcd1bf9a1b36ce34237eeafef220932846bcd82",
            "hoprToken": "0x9a676e781a523b5d0c0e43731313a708cb607508",
            "indexBlockPrevChecksum": 0,
            "indexerBlock": 123456,
            "indexerChecksum": "0000000000000000000000000000000000000000000000000000000000000000",
            "indexerLastLogBlock": 123450,
            "indexerLastLogChecksum": "cfde556a7e9ff0848998aa4a9a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
            "isEligible": true,
            "listeningAddress": [
              "/ip4/10.0.2.100/tcp/19092"
            ],
            "network": "anvil-localhost",
            "provider": "http://127.0.0.1:8545"
          }
        },
        "NodePeerInfoResponse": {
          "type": "object",
          "required": [
            "announced",
            "observed"
          ],
          "properties": {
            "announced": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "observed": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "example": {
            "announced": [
              "/ip4/10.0.2.100/tcp/19093"
            ],
            "observed": [
              "/ip4/10.0.2.100/tcp/19093"
            ]
          }
        },
        "NodePeersQueryRequest": {
          "type": "object",
          "properties": {
            "quality": {
              "type": "number",
              "format": "double"
            }
          },
          "example": {
            "quality": 0.7
          }
        },
        "NodePeersResponse": {
          "type": "object",
          "required": [
            "connected",
            "announced"
          ],
          "properties": {
            "announced": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AnnouncedPeer"
              }
            },
            "connected": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PeerInfo"
              }
            }
          }
        },
        "NodeTicketStatisticsResponse": {
          "type": "object",
          "required": [
            "winningCount",
            "unredeemedValue",
            "redeemedValue",
            "neglectedValue",
            "rejectedValue"
          ],
          "properties": {
            "neglectedValue": {
              "type": "string"
            },
            "redeemedValue": {
              "type": "string"
            },
            "rejectedValue": {
              "type": "string"
            },
            "unredeemedValue": {
              "type": "string"
            },
            "winningCount": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          "example": {
            "neglectedValue": "0",
            "redeemedValue": "1000000000000000000",
            "rejectedValue": "0",
            "unredeemedValue": "2000000000000000",
            "winning_count": 0
          }
        },
        "NodeVersionResponse": {
          "type": "object",
          "required": [
            "version",
            "apiVersion"
          ],
          "properties": {
            "apiVersion": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "example": {
            "apiVersion": "3.10.0",
            "version": "2.1.0"
          }
        },
        "OpenChannelBodyRequest": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "type": "string",
              "description": "Initial amount of stake in HOPR tokens."
            },
            "destination": {
              "type": "string",
              "description": "On-chain address of the counterparty."
            },
            "peerAddress": {
              "type": "string",
              "description": "Deprecated: PeerId of the counterparty."
            }
          },
          "example": {
            "amount": "10",
            "destination": "0xa8194d36e322592d4c707b70dbe96121f5c74c64"
          }
        },
        "OpenChannelResponse": {
          "type": "object",
          "required": [
            "channelId",
            "transactionReceipt"
          ],
          "properties": {
            "channelId": {
              "type": "string",
              "description": "ID of the new channel."
            },
            "transactionReceipt": {
              "type": "string",
              "description": "Receipt of the channel open transaction."
            }
          },
          "example": {
            "channelId": "0x04efc1481d3f106b88527b3844ba40042b823218a9cd29d1aa11c2c2ef8f538f",
            "transactionReceipt": "0x5181ac24759b8e01b3c932e4636c3852f386d17517a8dfc640a5ba6f2258f29c"
          }
        },
        "PeerIdResponse": {
          "type": "object",
          "required": [
            "peerId"
          ],
          "properties": {
            "peerId": {
              "type": "string"
            }
          },
          "example": {
            "peerId": "12D3KooWRWeTozREYHzWTbuCYskdYhED1MXpDwTrmccwzFrd2mEA"
          }
        },
        "PeerInfo": {
          "type": "object",
          "required": [
            "peerId",
            "heartbeats",
            "lastSeen",
            "lastSeenLatency",
            "quality",
            "backoff",
            "isNew",
            "reportedVersion"
          ],
          "properties": {
            "backoff": {
              "type": "number",
              "format": "double"
            },
            "heartbeats": {
              "$ref": "#/components/schemas/HeartbeatInfo"
            },
            "isNew": {
              "type": "boolean"
            },
            "lastSeen": {
              "type": "integer",
              "minimum": 0
            },
            "lastSeenLatency": {
              "type": "integer",
              "minimum": 0
            },
            "multiaddr": {
              "type": "string",
              "nullable": true
            },
            "peerAddress": {
              "type": "string",
              "nullable": true
            },
            "peerId": {
              "type": "string"
            },
            "quality": {
              "type": "number",
              "format": "double"
            },
            "reportedVersion": {
              "type": "string"
            }
          }
        },
        "PingResponse": {
          "type": "object",
          "required": [
            "latency",
            "reportedVersion"
          ],
          "properties": {
            "latency": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "reportedVersion": {
              "type": "string"
            }
          },
          "example": {
            "latency": 200,
            "reportedVersion": "2.1.0"
          }
        },
        "RoutingOptions": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "IntermediatePath"
              ],
              "properties": {
                "IntermediatePath": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "type": "object",
              "required": [
                "Hops"
              ],
              "properties": {
                "Hops": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          ]
        },
        "SendMessageBodyRequest": {
          "type": "object",
          "required": [
            "tag",
            "body"
          ],
          "properties": {
            "body": {
              "type": "string",
              "format": "binary",
              "description": "Message to be transmitted over the network"
            },
            "destination": {
              "type": "string",
              "description": "The recipient HOPR PeerId or address"
            },
            "hops": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "maximum": 3,
              "minimum": 0
            },
            "path": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "peerId": {
              "type": "string",
              "description": "Deprecated: PeerId of the target node"
            },
            "tag": {
              "type": "integer",
              "format": "int32",
              "description": "The message tag used to filter messages based on application, must be from range <1024,65535>",
              "maximum": 65535,
              "minimum": 1024
            }
          },
          "example": {
            "body": "Test message",
            "hops": 1,
            "peerId": "12D3KooWEDc1vGJevww48trVDDf6pr1f6N3F86sGJfQrKCyc8kJ1",
            "tag": 2000
          }
        },
        "SendMessageResponse": {
          "type": "object",
          "required": [
            "timestamp",
            "challenge"
          ],
          "properties": {
            "challenge": {
              "type": "string"
            },
            "timestamp": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          "example": {
            "timestamp": 2147483647
          }
        },
        "SessionCapability": {
          "type": "string",
          "enum": [
            "Segmentation",
            "Retransmission",
            "RetransmissionAckOnly",
            "NoDelay"
          ]
        },
        "SessionClientRequest": {
          "type": "object",
          "required": [
            "destination",
            "path",
            "target"
          ],
          "properties": {
            "capabilities": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionCapability"
              },
              "description": "Capabilities for the Session protocol.\n\nDefaults to `Segmentation` and `Retransmission` for TCP and nothing for UDP.",
              "nullable": true
            },
            "destination": {
              "type": "string",
              "description": "Peer ID of the Exit node."
            },
            "listenHost": {
              "type": "string",
              "description": "Listen host (`ip:port`) for the Session socket at the Entry node.\n\nSupports also partial specification (only `ip` or only `:port`) with the\nrespective part replaced by the node's configured default.",
              "nullable": true
            },
            "path": {
              "$ref": "#/components/schemas/RoutingOptions"
            },
            "target": {
              "$ref": "#/components/schemas/SessionTargetSpec"
            }
          },
          "example": {
            "capabilities": [
              "Retransmission",
              "Segmentation"
            ],
            "destination": "12D3KooWR4uwjKCDCAY1xsEFB4esuWLF9Q5ijYvCjz5PNkTbnu33",
            "listenHost": "127.0.0.1:10000",
            "path": {
              "Hops": 1
            },
            "target": {
              "Plain": "localhost:8080"
            }
          }
        },
        "SessionClientResponse": {
          "type": "object",
          "required": [
            "target",
            "protocol",
            "ip",
            "path",
            "port"
          ],
          "properties": {
            "ip": {
              "type": "string"
            },
            "path": {
              "$ref": "#/components/schemas/RoutingOptions"
            },
            "port": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "protocol": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          },
          "example": {
            "ip": "127.0.0.1",
            "path": {
              "Hops": 1
            },
            "port": 5542,
            "protocol": "tcp",
            "target": "example.com:80"
          }
        },
        "SessionTargetSpec": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "Plain"
              ],
              "properties": {
                "Plain": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "Sealed"
              ],
              "properties": {
                "Sealed": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "Service"
              ],
              "properties": {
                "Service": {
                  "$ref": "#/components/schemas/ServiceId"
                }
              }
            }
          ]
        },
        "SizeResponse": {
          "type": "object",
          "required": [
            "size"
          ],
          "properties": {
            "size": {
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "TagQueryRequest": {
          "type": "object",
          "properties": {
            "tag": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "minimum": 0
            }
          }
        },
        "TicketPriceResponse": {
          "type": "object",
          "required": [
            "price"
          ],
          "properties": {
            "price": {
              "type": "string",
              "description": "Price of the ticket in HOPR tokens."
            }
          },
          "example": {
            "price": "30000000000000000"
          }
        },
        "TicketProbabilityResponse": {
          "type": "object",
          "required": [
            "probability"
          ],
          "properties": {
            "probability": {
              "type": "number",
              "format": "double",
              "description": "Winning probability of a ticket."
            }
          },
          "example": {
            "probability": 0.5
          }
        },
        "WithdrawBodyRequest": {
          "type": "object",
          "required": [
            "currency",
            "amount",
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            }
          },
          "example": {
            "address": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe",
            "amount": "20000",
            "currency": "HOPR"
          }
        },
        "WithdrawResponse": {
          "type": "object",
          "required": [
            "receipt"
          ],
          "properties": {
            "receipt": {
              "type": "string"
            }
          },
          "example": {
            "receipt": "0xb4ce7e6e36ac8b01a974725d5ba730af2b156fbe"
          }
        }
      },
      "securitySchemes": {
        "api_token": {
          "type": "apiKey",
          "in": "header",
          "name": "X-Auth-Token"
        },
        "bearer_token": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "token"
        }
      }
    },
    "tags": [
      {
        "name": "Account",
        "description": "HOPR node account endpoints"
      },
      {
        "name": "Alias",
        "description": "HOPR node internal non-persistent alias endpoints"
      },
      {
        "name": "Channels",
        "description": "HOPR node chain channels manipulation endpoints"
      },
      {
        "name": "Checks",
        "description": "HOPR node functionality checks"
      },
      {
        "name": "Messages",
        "description": "HOPR node message manipulation endpoints"
      },
      {
        "name": "Node",
        "description": "HOPR node information endpoints"
      },
      {
        "name": "Peers",
        "description": "HOPR node peer manipulation endpoints"
      },
      {
        "name": "Tickets",
        "description": "HOPR node ticket management endpoints"
      }
    ]
  }
  